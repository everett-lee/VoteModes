aws dynamodb scan \
     --table-name Divisions \
     --filter-expression "VoteDate > :start_date" \
     --expression-attribute-values '{":start_date":{"S":"2020-04-01"}}'  --endpoint-url http://localhost:4566 
     
aws dynamodb scan \
	--table-name MPs \
	 --endpoint-url http://localhost:4566

aws dynamodb query \
    --table-name Divisions \
    --key-condition-expression 'DivisionElectionYear = :election_year AND DivisionDate > :start_date' \
    --expression-attribute-values '{":election_year": {"N": "2019"}, ":start_date": {"S": "2021-01-01"}}' \
    --endpoint-url http://localhost:4566

aws dynamodb query \
    --table-name MPs \
    --key-condition-expression 'MPElectionYear = :election_year' \
    --expression-attribute-values '{":election_year": {"N": "2019"}}' \
    --endpoint-url http://localhost:4566

aws dynamodb query \
    --table-name MPs \
    --key-condition-expression 'MPElectionYear = :election_year and MemberId > :min_id' \
    --expression-attribute-values '{":election_year": {"N": "2019"}, ":min_id": {"N": "50"}}' \
    --endpoint-url http://localhost:4566

aws lambda invoke \
    --function-name DownloaderLambda \
    --payload $(echo "{\"foo\":\"bar\"}" | base64) \
    response.json \
    --endpoint-url http://localhost:4566

aws dynamodb query \
    --table-name MPs \
    --key-condition-expression 'MPElectionYear = :election_year and MemberId > :min_id' \
    --expression-attribute-values '{":election_year": {"N": "2019"}, ":min_id": {"N": "50"}}' \
    --endpoint-url http://localhost:4566

CORBYN
aws dynamodb query \
    --table-name MPs \
    --key-condition-expression 'MPElectionYear = :election_year and MemberId = :mp_id' \
    --expression-attribute-values '{":election_year": {"N": "2019"}, ":mp_id": {"N": "185"}}'

zip -r9 ../downloader_lambda_app.zip * -x "bin/*" requirements.txt setup.cfg
zip -r9 ../downloader_lambda_app.zip * requirements.txt


>>>
>>> import boto3
>>> from boto3.dynamodb.conditions import Key
>>> dynamodb_client = boto3.session.Session(profile_name='localstack').resource('dynamodb',
... dynamodb_client = boto3.session.Session(profile_name='localstack').resource('dynamodb')
... dynamodb_client = boto3.resource('dynamodb')
  File "<stdin>", line 3
    dynamodb_client = boto3.resource('dynamodb')
    ^
SyntaxError: invalid syntax
    response = table.query(KeyConditionExpression=Key('year').eq(year)

